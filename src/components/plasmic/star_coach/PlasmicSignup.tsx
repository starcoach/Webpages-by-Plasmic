// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8kqtySnL71cyFF3GhKk7Hd
// Component: UrIpDiN_eU

import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: xAnzhKfFc5O0/component
import Button from "../../Button"; // plasmic-import: mx21GcmJtoKJ/component

import { useScreenVariants as useScreenVariantscahMfBb9YIj2 } from "../star_coach_landing_page/PlasmicGlobalVariant__Screen"; // plasmic-import: cahMFBb9yIJ2/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../star_coach_landing_page/plasmic_star_coach_landing_page.module.css"; // plasmic-import: 8kqtySnL71cyFF3GhKk7Hd/projectcss
import sty from "./PlasmicSignup.module.css"; // plasmic-import: UrIpDiN_eU/css

import AppleIcon from "../star_coach_landing_page/icons/PlasmicIcon__Apple"; // plasmic-import: dmMF3tC38IpI/icon
import SearchIcon from "../star_coach_landing_page/icons/PlasmicIcon__Search"; // plasmic-import: Vovfg_qxLzNA/icon
import ChecksvgIcon from "../star_coach_landing_page/icons/PlasmicIcon__Checksvg"; // plasmic-import: HPZNWI9wvtxi/icon
import showroom152PngLUiHsRaeS from "../star_coach_landing_page/images/showroom152Png.png"; // plasmic-import: lUiHSRaeS/picture

createPlasmicElementProxy;

export type PlasmicSignup__VariantMembers = {};
export type PlasmicSignup__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignup__VariantsArgs;
export const PlasmicSignup__VariantProps = new Array<VariantPropType>();

export type PlasmicSignup__ArgsType = {};
type ArgPropType = keyof PlasmicSignup__ArgsType;
export const PlasmicSignup__ArgProps = new Array<ArgPropType>();

export type PlasmicSignup__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  aboutUs?: p.Flex<"a">;
  contact?: p.Flex<"div">;
  banner?: p.Flex<"div">;
  foreground2?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  clientsSection5?: p.Flex<"div">;
  formWrapper?: p.Flex<"div">;
  name?: p.Flex<typeof TextInput>;
  name2?: p.Flex<typeof TextInput>;
  name5?: p.Flex<typeof TextInput>;
  name3?: p.Flex<typeof TextInput>;
  h4?: p.Flex<"h4">;
  footerTopSection?: p.Flex<"div">;
  foreground3?: p.Flex<"div">;
  rowWrapper?: p.Flex<"div">;
  colmn1?: p.Flex<"div">;
  colmn2?: p.Flex<"div">;
  colmn22?: p.Flex<"div">;
  colmn3?: p.Flex<"div">;
};

export interface DefaultSignupProps {
  className?: string;
}

const $$ = {};

function PlasmicSignup__RenderFunc(props: {
  variants: PlasmicSignup__VariantsArgs;
  args: PlasmicSignup__ArgsType;
  overrides: PlasmicSignup__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name5.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "name3.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantscahMfBb9YIj2()
  });

  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__t4RQm)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__qipos)}
            >
              <a
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__txXBl
                )}
              >
                <p.PlasmicImg
                  data-plasmic-name={"img"}
                  data-plasmic-override={overrides.img}
                  alt={""}
                  className={classNames(sty.img)}
                  displayHeight={"78px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"78px"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={{
                    src: showroom152PngLUiHsRaeS,
                    fullWidth: 152,
                    fullHeight: 152,
                    aspectRatio: undefined
                  }}
                />
              </a>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__p7SwK)}
              >
                <p.Stack
                  as={"a"}
                  data-plasmic-name={"aboutUs"}
                  data-plasmic-override={overrides.aboutUs}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.aboutUs
                  )}
                >
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__zztsc)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vh5X
                    )}
                  >
                    {"About Us"}
                  </div>
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__ow3EO)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__oHUg
                  )}
                >
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__rpJxz)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__nvfJi
                    )}
                  >
                    {"Services"}
                  </div>
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__uidZr)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zF4QO
                  )}
                >
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__qS4Mv)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___2ZjA
                    )}
                  >
                    {"Clients"}
                  </div>
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__hn0Xr)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__cEkEn
                  )}
                >
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__hfrJd)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bBi5S
                    )}
                  >
                    {"Blog"}
                  </div>
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__wc4Kt)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
                <p.Stack
                  as={"a"}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__jf9Kd
                  )}
                >
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__wfyPv)}
                      role={"img"}
                    />
                  ) : null}
                  <div
                    data-plasmic-name={"contact"}
                    data-plasmic-override={overrides.contact}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.contact
                    )}
                  >
                    {"Contact Us"}
                  </div>
                  {false ? (
                    <AppleIcon
                      className={classNames(projectcss.all, sty.svg__pwd8C)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
          <div
            data-plasmic-name={"banner"}
            data-plasmic-override={overrides.banner}
            className={classNames(projectcss.all, sty.banner)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"foreground2"}
              data-plasmic-override={overrides.foreground2}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground2)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__mq7Op)}
              >
                <h1
                  data-plasmic-name={"h1"}
                  data-plasmic-override={overrides.h1}
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Contact us"
                    : "Sign Up"}
                </h1>
              </p.Stack>
            </p.Stack>
          </div>
          <p.Stack
            as={"div"}
            data-plasmic-name={"clientsSection5"}
            data-plasmic-override={overrides.clientsSection5}
            hasGap={true}
            className={classNames(projectcss.all, sty.clientsSection5)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__xciFe)}
            >
              <div className={classNames(projectcss.all, sty.columns__ixwhu)}>
                <div className={classNames(projectcss.all, sty.column__nfL50)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4HhoW
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Proactively architect worldwide sources, then globally implement enabled  users, then collaboratively innovate unique expertise, then continually  strategize excellent markets."
                      : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s."}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__rHxpp)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.columns__alint)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column___5Kavl)}
                    >
                      <div
                        data-plasmic-name={"formWrapper"}
                        data-plasmic-override={overrides.formWrapper}
                        className={classNames(projectcss.all, sty.formWrapper)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns___5AvEh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___2NKwa
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__goEI
                              )}
                            >
                              {"First name"}
                            </div>
                            <TextInput
                              data-plasmic-name={"name"}
                              data-plasmic-override={overrides.name}
                              className={classNames("__wab_instance", sty.name)}
                              endIcon={
                                <ChecksvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__opHuM
                                  )}
                                  role={"img"}
                                />
                              }
                              onChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "name",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              placeholder={""}
                              startIcon={
                                <SearchIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nxk0U
                                  )}
                                  role={"img"}
                                />
                              }
                              value={
                                p.generateStateValueProp($state, [
                                  "name",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__rlwGd
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___36Lk4
                              )}
                            >
                              {"Last name"}
                            </div>
                            <TextInput
                              data-plasmic-name={"name2"}
                              data-plasmic-override={overrides.name2}
                              className={classNames(
                                "__wab_instance",
                                sty.name2
                              )}
                              endIcon={
                                <ChecksvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nDg48
                                  )}
                                  role={"img"}
                                />
                              }
                              onChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "name2",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              placeholder={""}
                              startIcon={
                                <SearchIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___4P3Hd
                                  )}
                                  role={"img"}
                                />
                              }
                              value={
                                p.generateStateValueProp($state, [
                                  "name2",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__kvvww
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__tcdOh
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__asXpg
                              )}
                            >
                              {"Email address"}
                            </div>
                            <TextInput
                              data-plasmic-name={"name5"}
                              data-plasmic-override={overrides.name5}
                              className={classNames(
                                "__wab_instance",
                                sty.name5
                              )}
                              endIcon={
                                <ChecksvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___0Blhh
                                  )}
                                  role={"img"}
                                />
                              }
                              onChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "name5",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              placeholder={""}
                              startIcon={
                                <SearchIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__gFg3C
                                  )}
                                  role={"img"}
                                />
                              }
                              value={
                                p.generateStateValueProp($state, [
                                  "name5",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column___5Zvl9
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___75X5Z
                              )}
                            >
                              {"Password"}
                            </div>
                            <TextInput
                              data-plasmic-name={"name3"}
                              data-plasmic-override={overrides.name3}
                              className={classNames(
                                "__wab_instance",
                                sty.name3
                              )}
                              endIcon={
                                <ChecksvgIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fky2U
                                  )}
                                  role={"img"}
                                />
                              }
                              onChange={(...eventArgs) => {
                                p.generateStateOnChangeProp($state, [
                                  "name3",
                                  "value"
                                ])(
                                  (e => e.target?.value).apply(null, eventArgs)
                                );
                              }}
                              placeholder={""}
                              startIcon={
                                <SearchIcon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__znAtg
                                  )}
                                  role={"img"}
                                />
                              }
                              value={
                                p.generateStateValueProp($state, [
                                  "name3",
                                  "value"
                                ]) ?? ""
                              }
                            />
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.columns__c3PhI
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.column__cqxH5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ov9Ut
                              )}
                            >
                              <Button
                                className={classNames(
                                  "__wab_instance",
                                  sty.button__sDgrH
                                )}
                                endIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__x06Sb
                                    )}
                                    role={"img"}
                                  />
                                }
                                startIcon={
                                  <ChecksvgIcon
                                    className={classNames(
                                      projectcss.all,
                                      sty.svg__wl4Hd
                                    )}
                                    role={"img"}
                                  />
                                }
                                submitsForm={true}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__nacpl
                                  )}
                                >
                                  {"Submit"}
                                </div>
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.column__ttKy0)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zPzff
                        )}
                      >
                        <h2
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2__xbJy
                          )}
                        >
                          {"Address"}
                        </h2>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__s3PLx
                          )}
                        >
                          {
                            "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sbWoC
                          )}
                        >
                          {"xyz@companyname.com"}
                        </div>
                        <h4
                          data-plasmic-name={"h4"}
                          data-plasmic-override={overrides.h4}
                          className={classNames(
                            projectcss.all,
                            projectcss.h4,
                            projectcss.__wab_text,
                            sty.h4
                          )}
                        >
                          {"Address 2"}
                        </h4>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__r9NHb
                          )}
                        >
                          {
                            "1234 Lorem Ipsum .\nLorem Ipsum , GA 30308\n1234567890"
                          }
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__zfCg
                          )}
                        >
                          {"xyz@companyname.com"}
                        </div>
                      </p.Stack>
                    </div>
                  </p.Stack>
                </div>
              </div>
            </p.Stack>
          </p.Stack>
          <div
            data-plasmic-name={"footerTopSection"}
            data-plasmic-override={overrides.footerTopSection}
            className={classNames(projectcss.all, sty.footerTopSection)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__aHbQo)}>
              <div className={classNames(projectcss.all, sty.freeBox__xvtxg)}>
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"foreground3"}
                  data-plasmic-override={overrides.foreground3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.foreground3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sZovz)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__lrs6I
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Take your business to the next level"
                        : "Join Us"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__rful3
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Rapidiously revolutionize future-proof niches, and authoritatively \nrestore user-centric e-markets."
                        : "Lorem Ipsum is simply dummy text of the printing and typesetting industry. "}
                    </div>
                  </p.Stack>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fTsRx)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__obFx)}
                    >
                      <p.Stack
                        as={"button"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          sty.button__gsE6
                        )}
                      >
                        {false ? (
                          <AppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__iSyy
                            )}
                            role={"img"}
                          />
                        ) : null}
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yPkdD
                          )}
                        >
                          {"Get IN Touch"}
                        </div>
                        {false ? (
                          <AppleIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__r6Lu1
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sojCd)}>
            <div className={classNames(projectcss.all, sty.freeBox__xFlVe)}>
              <p.Stack
                as={"div"}
                data-plasmic-name={"rowWrapper"}
                data-plasmic-override={overrides.rowWrapper}
                hasGap={true}
                className={classNames(projectcss.all, sty.rowWrapper)}
              >
                <div
                  data-plasmic-name={"colmn1"}
                  data-plasmic-override={overrides.colmn1}
                  className={classNames(projectcss.all, sty.colmn1)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__lKhSj
                    )}
                  >
                    {"About us"}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__svgEn
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "\u00a9 Company. All rights reserved. This site proudly built with "
                        }
                      </React.Fragment>
                      {
                        <a
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            projectcss.plasmic_default__inline,
                            sty.link__swkZi
                          )}
                          href={"https://www.plasmic.app"}
                        >
                          {"Plasmic"}
                        </a>
                      }
                      <React.Fragment>{"."}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
                <div
                  data-plasmic-name={"colmn2"}
                  data-plasmic-override={overrides.colmn2}
                  className={classNames(projectcss.all, sty.colmn2)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3___9Ozw
                    )}
                  >
                    {"Links"}
                  </h3>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___9UuZg
                    )}
                  >
                    {"Services"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__ryJui
                    )}
                  >
                    {"About us"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__narvv
                    )}
                    href={"#"}
                  >
                    {"Testimonials"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__huyOg
                    )}
                    href={"#"}
                  >
                    {"Blog"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__nkXcW
                    )}
                  >
                    {"Contact us\n"}
                  </a>
                </div>
                <div
                  data-plasmic-name={"colmn22"}
                  data-plasmic-override={overrides.colmn22}
                  className={classNames(projectcss.all, sty.colmn22)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__pjMwn
                    )}
                  >
                    {"Nav Links"}
                  </h3>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__rzg1
                    )}
                  >
                    {"Services"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__jPzAh
                    )}
                  >
                    {"About us"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___0Wh7U
                    )}
                  >
                    {"Testimonials"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__tFtU
                    )}
                    href={"#"}
                  >
                    {"Blog"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__xRuT0
                    )}
                  >
                    {"Contact us\n"}
                  </a>
                </div>
                <div
                  data-plasmic-name={"colmn3"}
                  data-plasmic-override={overrides.colmn3}
                  className={classNames(projectcss.all, sty.colmn3)}
                >
                  <h3
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3__dcPc4
                    )}
                  >
                    {"Contact "}
                  </h3>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9ZpGg
                    )}
                  >
                    {"1234 Lorem Ipsum .\nLorem Ipsum , GA 30308"}
                  </div>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___2Dhpa
                    )}
                    href={"#"}
                  >
                    {"xyz@company.com"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__vVqdF
                    )}
                    href={"#"}
                  >
                    {"1234567890"}
                  </a>
                </div>
              </p.Stack>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "aboutUs",
    "contact",
    "banner",
    "foreground2",
    "h1",
    "clientsSection5",
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "h4",
    "footerTopSection",
    "foreground3",
    "rowWrapper",
    "colmn1",
    "colmn2",
    "colmn22",
    "colmn3"
  ],
  img: ["img"],
  aboutUs: ["aboutUs"],
  contact: ["contact"],
  banner: ["banner", "foreground2", "h1"],
  foreground2: ["foreground2", "h1"],
  h1: ["h1"],
  clientsSection5: [
    "clientsSection5",
    "formWrapper",
    "name",
    "name2",
    "name5",
    "name3",
    "h4"
  ],
  formWrapper: ["formWrapper", "name", "name2", "name5", "name3"],
  name: ["name"],
  name2: ["name2"],
  name5: ["name5"],
  name3: ["name3"],
  h4: ["h4"],
  footerTopSection: ["footerTopSection", "foreground3"],
  foreground3: ["foreground3"],
  rowWrapper: ["rowWrapper", "colmn1", "colmn2", "colmn22", "colmn3"],
  colmn1: ["colmn1"],
  colmn2: ["colmn2"],
  colmn22: ["colmn22"],
  colmn3: ["colmn3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  aboutUs: "a";
  contact: "div";
  banner: "div";
  foreground2: "div";
  h1: "h1";
  clientsSection5: "div";
  formWrapper: "div";
  name: typeof TextInput;
  name2: typeof TextInput;
  name5: typeof TextInput;
  name3: typeof TextInput;
  h4: "h4";
  footerTopSection: "div";
  foreground3: "div";
  rowWrapper: "div";
  colmn1: "div";
  colmn2: "div";
  colmn22: "div";
  colmn3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignup__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignup__VariantsArgs;
    args?: PlasmicSignup__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignup__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSignup__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSignup__ArgProps,
          internalVariantPropNames: PlasmicSignup__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignup__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignup";
  } else {
    func.displayName = `PlasmicSignup.${nodeName}`;
  }
  return func;
}

export const PlasmicSignup = Object.assign(
  // Top-level PlasmicSignup renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    aboutUs: makeNodeComponent("aboutUs"),
    contact: makeNodeComponent("contact"),
    banner: makeNodeComponent("banner"),
    foreground2: makeNodeComponent("foreground2"),
    h1: makeNodeComponent("h1"),
    clientsSection5: makeNodeComponent("clientsSection5"),
    formWrapper: makeNodeComponent("formWrapper"),
    _name: makeNodeComponent("name"),
    name2: makeNodeComponent("name2"),
    name5: makeNodeComponent("name5"),
    name3: makeNodeComponent("name3"),
    h4: makeNodeComponent("h4"),
    footerTopSection: makeNodeComponent("footerTopSection"),
    foreground3: makeNodeComponent("foreground3"),
    rowWrapper: makeNodeComponent("rowWrapper"),
    colmn1: makeNodeComponent("colmn1"),
    colmn2: makeNodeComponent("colmn2"),
    colmn22: makeNodeComponent("colmn22"),
    colmn3: makeNodeComponent("colmn3"),

    // Metadata about props expected for PlasmicSignup
    internalVariantProps: PlasmicSignup__VariantProps,
    internalArgProps: PlasmicSignup__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignup;
/* prettier-ignore-end */
